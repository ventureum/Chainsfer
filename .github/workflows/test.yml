name: Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - **
jobs:
  build:
     
    runs-on: ubuntu-latest
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
    steps:
    - name: Checkout Git
      uses: actions/checkout@v2
      
    # setup node
    - name: Use Node 12
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
      env:
        CI: true
    - name: Cache node modules
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    # install dependencies
    - name: Install Dependencies
      run: npm ci
      env:
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
       
      
    # lint
    # - run: npm run eslint && npm run flow
    
    # e2e tests
    - name: E2E Test
      uses: ventureum/puppeteer-headful@master
      env:
        CI: 'true'
        # we use test.api.chainsfr.com backend
        REACT_APP_CHAINSFER_API_ENDPOINT: https://test.api.chainsfr.com
        REACT_APP_E2E_TEST_MOCK_USER: true
        E2E_TEST_START_SERVER: true
        E2E_TEST_URL: http://localhost:3001
        E2E_TEST_GOOGLE_LOGIN_USERNAME: ${{ secrets.E2E_TEST_GOOGLE_LOGIN_USERNAME }}
        E2E_TEST_GOOGLE_LOGIN_PASSWORD: ${{ secrets.E2E_TEST_GOOGLE_LOGIN_PASSWORD }}
        E2E_TEST_ANTICAPTCHA_API_KEY: ${{ secrets.E2E_TEST_ANTICAPTCHA_API_KEY }}
        E2E_TEST_METAMASK_PRIVATE_KEY: ${{ secrets.E2E_TEST_METAMASK_PRIVATE_KEY }}
      with:
        args: npm run test:e2e
      
    # build & deploy test 
    - run: npm run build:test && mv ./build ./build_test
    - run: aws s3 sync ./build_test s3://test.chainsfr.com --delete
      if: github.event_name == 'push'

    # deploy maintenance page
    - run: aws s3 sync ./maintenance s3://maintenance.chainsfr.com --delete
      if: github.event_name == 'push'

    # invalidate cdn
    - run: aws cloudfront create-invalidation --distribution-id ${{ secrets.TEST_DISTRIBUTION_ID }} --paths "/*"
      if: github.event_name == 'push'
    
    - name: Notify slack success
      if: success() && github.event_name == 'push'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        # Updates existing message from the first step
        message_id: ${{ steps.slack.outputs.message_id }}
        channel_id: CESRN89MF
        status: SUCCESS
        color: good
    - name: Notify slack failure
      if: failure() && github.event_name == 'push'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: voxmedia/github-action-slack-notify-build@v1
      with:
        # Updates existing message from the first step
        message_id: ${{ steps.slack.outputs.message_id }}
        channel_id: CESRN89MF
        status: FAILED
        color: danger
 
